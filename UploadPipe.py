import os
from pinecone import Pinecone as PineconeClient
import openai
from openai import OpenAI
import pandas as pd
import numpy as np
from PyPDF2 import PdfReader
import nltk
from nltk.tokenize import sent_tokenize
from RunApi import *

def send_data_to_pinecone(data, open_ai_client, pinecone):
    data['id'] = data.index.astype(str)
    
    print(data.columns)
    
    c = 0
    vectors = []
    for index, row in data.iterrows():
        thisv = {
            "id": row['id'],
            "values": row['embeds'],
            "metadata": {"text": row['text']}
        }
        vectors.append(thisv)
        if c > 500:
            pinecone.Index("buck3").upsert(
            vectors=vectors,
            namespace="ns1"
            )
        vectors = []
        c += 1
            
    # Assuming `index` is your Pinecone index object
    pinecone.Index("buck3").upsert(
        vectors=vectors,
        namespace="ns1"
    )


def get_all_embeddings(list_of_strings, client):
    embed_list = []
    c = 0
    for string in list_of_strings:
        if (c % 100 == 0):
            print(c)
        embed_list.append(get_embedding(string, client))
        c += 1
    return embed_list

def run_embeddings(client):
    cve_dataset = '/Users/siddadatrao/Downloads/all-cve-details-patches.csv'

    df = pd.read_csv(cve_dataset, on_bad_lines='skip')
    cve_summaries = list(df[:3000]['summary'])
    subset = list(df[:3000]['summary'])
    embed_list = get_all_embeddings(subset, client)
    return cve_summaries, embed_list

def main():
    open_ai_client, pinecone = connections()

    cve_summaries, embed_list = run_embeddings(open_ai_client)

    embed_list_np =  np.array(embed_list)
    data_df = pd.DataFrame()
    data_df['text'] = cve_summaries
    data_df['embeds'] = embed_list_np.tolist()
    send_data_to_pinecone(data_df, open_ai_client, pinecone)

# The main entry point of the program
if __name__ == "__main__":
    main()